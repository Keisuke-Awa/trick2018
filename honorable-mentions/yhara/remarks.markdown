### Remarks

Just run it with no argument:

    ruby entry.rb

I confirmed the following implementations/platforms:

* ruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-darwin16]
* ruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin16]

### Description

It is easy to write a obfuscated program like this.

  ...code...
  ...code...
  ...code...

  ...data...
  ...data...
  ...data...

Then how about this?

  ...code...    ...data...
  ...code...    ...data...
  ...code...    ...data...

An obvious approach to achieve this is using `File.read($0)` to scrape
the data. It will be even easier if you comment out the data like:

  ...code...#    ...data...
  ...code...#    ...data...
  ...code...#    ...data...

But in this program, data is also code and actually evaluated by Ruby.

Both code and data blocks are 25 characters wide. When executed, 
it prints a message related to 25.

The sum of the first and last of the numbers are both 25.
  1 + 5 + 4 + 7 + 1 + 4 + 3 = 25
  5 + 4 + 3 + 2 + 6 + 2 + 3 = 25

The sum of the numbers is 35514971836982755392701225,
which is divisible by 25.

In addition, the left part itself is a valid Ruby program.
Try this and see it does not raise any exception.

    ruby no_numbers.rb

### Internals

It uses `ObjectSpace` to collect Bignum instances. This technique is 
described in the book of Yusuke Endoh.

#### Embedding

Here are techniques used to embed numbers without raising
syntax error.

1. Embed in an array literal (eg. `[ 12345678` )
2. Make it a statement with (eg. `{ 12345678`, `; 12345678` )
3. Use multiple assignment to discard it (eg. `a, = expr, 12345678`)
4. Skip with useless operator call (eg. `1 <=> 12345678` )
5. Use `||` (eg. `expr|| 12345678` )
  - This number literal is never evaluated but don't worry,
    it seems that a Bignum instance is created :-)

Technics to make the left part independent:

- `[ObjectSpace,]` is a valid Ruby literal (equals to `[ObjectSpace]).
- Operator `<=>` returns a number and works well with the
  next line (it will be parsed as `(0 <=> s) < n && ...)
- Passing a block to `to_s` is legal (just ignored).

Technics not used:

- You cannot use `#` to embed a number in comment; it must be evaluated to instantiate Bignum.
- For the same reason, you cannot embed a number in string (like with `%()`)

#### Encoding

Here is the message encoder:

    msg = "   ~ Congratulations Ruby 25th ~\nTRICK FINAL in RubyKaigi2018 Sendai\n"
    hex_str = msg.unpack('H*#')[0]
    dec_str = hex_str.to_i(16).to_s
    dec_str2 = "0"*(24 - dec_str.length % 24) + dec_str
    sliced = dec_str2.chars.each_slice(24).map.with_index(1){|a,i| i.to_s + a.join}
    puts sliced.shuffle

- The message is converted to a big decimal number. Then it is sliced to 24 characters each.
- You cannot expect the iteration order of `ObjectSpace.each_object`, so 
  I added prefixes to numbers and use `Array#sort`.
  - In the final program, prefixes are changed by hand to make the sum divisible
  by 25.

### Limitation

- Since this program uses ObjectSpace, I'm not sure it runs on other than
  MRI (maybe JRuby?).
- In older MRIs, `I=Integer` should be replaced to `I=Bignum`.
- The condition `10**24 < n && n < 10**25` filters out Bignums
  that are not generated by this program. However I'm not sure
  this always works fine.

### Note

I submitted two programs to celebrate Ruby's 25th year.
Check out the other one too.
